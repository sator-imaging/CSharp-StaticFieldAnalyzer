<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SMA0001_Description" xml:space="preserve">
    <value>Static field declaration order is wrong.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="SMA0001_MessageFormat" xml:space="preserve">
    <value>Reading '{0}' before initialize (WrongInit)</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="SMA0001_Title" xml:space="preserve">
    <value>Reading Uninitialized Value</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="SMA0002_Description" xml:space="preserve">
    <value>Trying to read value from static field declared in cross-referencing type.</value>
  </data>
  <data name="SMA0002_MessageFormat" xml:space="preserve">
    <value>Type '{0}' is referencing static field in type '{1}' (CrossRef)</value>
  </data>
  <data name="SMA0002_Title" xml:space="preserve">
    <value>Cross Referencing across Type</value>
  </data>
  <data name="SMA0003_Description" xml:space="preserve">
    <value>Initialization order of partial type files is undefined in language spec.</value>
  </data>
  <data name="SMA0003_MessageFormat" xml:space="preserve">
    <value>Partial type member '{0}' is declared in another .cs file (AnotherFile)</value>
  </data>
  <data name="SMA0003_Title" xml:space="preserve">
    <value>Static Member Declared in Another File</value>
  </data>
  <data name="SMA0004_Description" xml:space="preserve">
    <value>Static field is read before initialize.</value>
  </data>
  <data name="SMA0004_MessageFormat" xml:space="preserve">
    <value>'{0}' is reading this member before declaration (LateDeclare)</value>
  </data>
  <data name="SMA0004_Title" xml:space="preserve">
    <value>Late Declaration</value>
  </data>
  <data name="SMA0010_Description" xml:space="preserve">
    <value>`TSelf` type arg should be pointing itself.</value>
  </data>
  <data name="SMA0010_MessageFormat" xml:space="preserve">
    <value>Did you mean '{0}'? (TSelf)</value>
  </data>
  <data name="SMA0010_Title" xml:space="preserve">
    <value>TSelf is Not Self</value>
  </data>
  <data name="SMA0011_Description" xml:space="preserve">
    <value>`TSelf` type arg should be pointing itself or its base type.</value>
  </data>
  <data name="SMA0011_MessageFormat" xml:space="preserve">
    <value>Did you mean '{0}' or base type? (TSelfCovariant)</value>
  </data>
  <data name="SMA0011_Title" xml:space="preserve">
    <value>TSelf is Not Self or Base</value>
  </data>
  <data name="SMA0012_Description" xml:space="preserve">
    <value>`TSelf` type arg should be pointing itself or its derived type.</value>
  </data>
  <data name="SMA0012_MessageFormat" xml:space="preserve">
    <value>Did you mean '{0}' or derived type? (TSelfContravariant)</value>
  </data>
  <data name="SMA0012_Title" xml:space="preserve">
    <value>TSelf is Not Self or Derived</value>
  </data>
  <data name="SMA9000_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9000_MessageFormat" xml:space="preserve">
    <value>[identifier] {0}
&gt; {1}</value>
  </data>
  <data name="SMA9000_Title" xml:space="preserve">
    <value>Underlining on Identifier Symbols</value>
  </data>
  <data name="SMA9001_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9001_MessageFormat" xml:space="preserve">
    <value>[localvar] {0}
&gt; {1}</value>
  </data>
  <data name="SMA9001_Title" xml:space="preserve">
    <value>Underlining on Local Variables</value>
  </data>
  <data name="SMA9002_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9002_MessageFormat" xml:space="preserve">
    <value>[param] {0}
&gt; {1}</value>
  </data>
  <data name="SMA9002_Title" xml:space="preserve">
    <value>Underlining on Method or Lambda Parameters</value>
  </data>
  <data name="SMA9010_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9010_MessageFormat" xml:space="preserve">
    <value>[declaration] {0}
&gt; {1}</value>
  </data>
  <data name="SMA9010_Title" xml:space="preserve">
    <value>Underlining on Declarations</value>
  </data>
  <data name="SMA9020_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9020_MessageFormat" xml:space="preserve">
    <value>[linehead] {0}
&gt; {1}</value>
  </data>
  <data name="SMA9020_Title" xml:space="preserve">
    <value>Underlining at Line Head</value>
  </data>
  <data name="SMA9021_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9021_MessageFormat" xml:space="preserve">
    <value>[linelead] {0}
&gt; {1}</value>
  </data>
  <data name="SMA9021_Title" xml:space="preserve">
    <value>Underlining at Line Leading</value>
  </data>
  <data name="SMA9022_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9022_MessageFormat" xml:space="preserve">
    <value>[linefill] {0}
&gt; {1}</value>
  </data>
  <data name="SMA9022_Title" xml:space="preserve">
    <value>Underlining on Identifier</value>
  </data>
  <data name="SMA9023_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9023_MessageFormat" xml:space="preserve">
    <value>[lineend] {0}
&gt; {1}</value>
  </data>
  <data name="SMA9023_Title" xml:space="preserve">
    <value>Underlining at Line End</value>
  </data>
  <data name="SMA9100_Description" xml:space="preserve">
    <value>Draw underline in IDE.</value>
  </data>
  <data name="SMA9100_MessageFormat" xml:space="preserve">
    <value>{1} ({0})</value>
  </data>
  <data name="SMA9100_Title" xml:space="preserve">
    <value>Underlining as Warning</value>
  </data>
  <data name="SMA0020_Title" xml:space="preserve">
    <value>Unchecked Cast to Enum Type</value>
  </data>
  <data name="SMA0020_Description" xml:space="preserve">
    <value>Unchecked value conversion to enum type.</value>
  </data>
  <data name="SMA0020_MessageFormat" xml:space="preserve">
    <value>Unchecked value of '{0}' (CastToEnum)</value>
  </data>
  <data name="SMA0021_Description" xml:space="preserve">
    <value>Casting enum type to other.</value>
  </data>
  <data name="SMA0021_Title" xml:space="preserve">
    <value>Cast from Enum Type to Other</value>
  </data>
  <data name="SMA0021_MessageFormat" xml:space="preserve">
    <value>Conversion of '{0}' (CastFromEnum)</value>
  </data>
  <data name="SMA0022_Title" xml:space="preserve">
    <value>Unchecked Cast to Generic Enum Type</value>
  </data>
  <data name="SMA0022_Description" xml:space="preserve">
    <value>Unchecked value conversion to generic enum type.</value>
  </data>
  <data name="SMA0022_MessageFormat" xml:space="preserve">
    <value>Unchecked value of '{0}' (CastToGenericEnum)</value>
  </data>
  <data name="SMA0023_Title" xml:space="preserve">
    <value>Cast from Generic Enum Type to Other</value>
  </data>
  <data name="SMA0023_Description" xml:space="preserve">
    <value>Casting generic enum type to other.</value>
  </data>
  <data name="SMA0023_MessageFormat" xml:space="preserve">
    <value>Conversion of '{0}' (CastFromGenericEnum)</value>
  </data>
  <data name="SMA0024_Title" xml:space="preserve">
    <value>Enum to String</value>
  </data>
  <data name="SMA0024_Description" xml:space="preserve">
    <value>Trying to convert enum value to string.</value>
  </data>
  <data name="SMA0024_MessageFormat" xml:space="preserve">
    <value>String representation of '{0}' could be modified by obfuscation tool (EnumToString)</value>
  </data>
  <data name="SMA0025_Title" xml:space="preserve">
    <value>Enum System Method</value>
  </data>
  <data name="SMA0025_Description" xml:space="preserve">
    <value>Calling enum system method.</value>
  </data>
  <data name="SMA0025_MessageFormat" xml:space="preserve">
    <value>Enum handling should be encapsulated in utility class (EnumMethod)</value>
  </data>
  <data name="SMA0026_Title" xml:space="preserve">
    <value>Enum Obfuscation</value>
  </data>
  <data name="SMA0026_MessageFormat" xml:space="preserve">
    <value>'Obfuscation' attribute should be added to prevent name changes (EnumObfuscation)</value>
  </data>
  <data name="SMA0026_Description" xml:space="preserve">
    <value>Enum obfuscation should have controlled.</value>
  </data>
  <data name="SMA0027_Title" xml:space="preserve">
    <value>Unusual Enum Definition</value>
  </data>
  <data name="SMA0027_Description" xml:space="preserve">
    <value>Enum w/o `Flags` attribute should be defined as usual.</value>
  </data>
  <data name="SMA0027_MessageFormat" xml:space="preserve">
    <value>Non-Flags enum type should have int-typed and no index modifier (UnusualEnum)</value>
  </data>
  <data name="SMA0001__MD_TITLE__" xml:space="preserve">
    <value>Static Field Analysis</value>
  </data>
  <data name="SMA0010__MD_TITLE__" xml:space="preserve">
    <value>`TSelf` Type Arg Analysis</value>
  </data>
  <data name="SMA0020__MD_TITLE__" xml:space="preserve">
    <value>Enum Type Analysis</value>
  </data>
  <data name="SMA9000__MD_TITLE__" xml:space="preserve">
    <value>Annotating and Underling</value>
  </data>
  <data name="SMA0030__MD_TITLE__" xml:space="preserve">
    <value>Struct Analysis</value>
  </data>
  <data name="SMA0030_Title" xml:space="preserve">
    <value>Invalid Struct Constructor</value>
  </data>
  <data name="SMA0030_Description" xml:space="preserve">
    <value>Constructor has declared explicitly so should not use parameter-less one.</value>
  </data>
  <data name="SMA0030_MessageFormat" xml:space="preserve">
    <value>'{0}' has applicable constructor (InvalidStructCtor)</value>
  </data>
  <data name="SMA0040__MD_TITLE__" xml:space="preserve">
    <value>Disposable Analysis</value>
  </data>
  <data name="SMA0040_Title" xml:space="preserve">
    <value>No Using Statement Found</value>
  </data>
  <data name="SMA0040_MessageFormat" xml:space="preserve">
    <value>'{0}' has public 'void Dispose()' method (MissingUsing)</value>
  </data>
  <data name="SMA0040_Description" xml:space="preserve">
    <value>`using` statement should be used for instance that has public `void Dispose()` or `ValueTask DisposeAsync()` method.</value>
  </data>
  <data name="SMA0028_Title" xml:space="preserve">
    <value>Invalid Enum-like Pattern</value>
  </data>
  <data name="SMA0028_Description" xml:space="preserve">
    <value>Enum-like pattern implementation is not complete.</value>
  </data>
  <data name="SMA0028_MessageFormat" xml:space="preserve">
    <value>Enum-like type '{0}' (EnumLike)
&gt; {1}</value>
  </data>
</root>