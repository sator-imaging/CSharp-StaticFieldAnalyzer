using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;

namespace DocsGen;

internal class Program
{
    const string HELP_USAGE = "USAGE: dotnet run -c Release  \"path/to/input.resx\"  \"path/to/output.md\"";
    const string DEBUG_FILE_INPUT = "../StaticMemberAnalyzer.Analysis/Resources.resx";
    const string DEBUG_FILE_OUTPUT = "./.__Test.md";

    const string SUFFIX_TITLE = "_Title";
    const string SUFFIX_DESCRIPTION = "_Description";
    const string SUFFIX_MD_TITLE = "__MD_TITLE__";

    static void Main(string[] args)
    {
        string? inputPath;
        string? outputPath;

        if (args.Length < 2
        || string.IsNullOrWhiteSpace(inputPath = args[0])
        || string.IsNullOrWhiteSpace(outputPath = args[1])
        || !inputPath.EndsWith(".resx", StringComparison.OrdinalIgnoreCase)
        || !outputPath.EndsWith(".md", StringComparison.OrdinalIgnoreCase)
        )
        {
#if DEBUG == false
            Console.Error.WriteLine(HELP_USAGE + Environment.NewLine);
            throw new ArgumentException(HELP_USAGE);
#endif
            inputPath = DEBUG_FILE_INPUT;
            outputPath = DEBUG_FILE_OUTPUT;
        }

        var analyzerInfo = new Dictionary<string, (string diagnosticId, string title, string description)>();

        var xdoc = XDocument.Load(inputPath);
        var root = xdoc.Root ?? throw new NullReferenceException();

        foreach (var node in root.Elements())
        {
            if (node.Name != "data")
                continue;

            var name = node.Attribute("name")?.Value
                ?? throw new NullReferenceException();

            var id = GetDiagnosticId(name);
            analyzerInfo.TryAdd(id, new(id, string.Empty, string.Empty));

            var data = analyzerInfo[id];
            if (name.EndsWith(SUFFIX_TITLE))
            {
                data.title = node.Element("value")?.Value ?? throw new NullReferenceException();
                analyzerInfo[id] = data;
            }
            else if (name.EndsWith(SUFFIX_DESCRIPTION))
            {
                data.description = node.Element("value")?.Value ?? throw new NullReferenceException();
                analyzerInfo[id] = data;
            }
            //category
            else if (name.EndsWith(SUFFIX_MD_TITLE))
            {
                var title = node.Element("value")?.Value ?? throw new NullReferenceException();
                var categoryId = id + "_Category";
                analyzerInfo.TryAdd(categoryId, new(id, title, string.Empty));
            }
        }


        // trying to find namespace
        var resourceDirPath = Path.GetDirectoryName(Path.GetFullPath(inputPath))/* not null */!;
        var analyzerTitle = Path.GetFileName(resourceDirPath);

        var resourceScriptPath = Path.Combine(resourceDirPath, Path.GetFileNameWithoutExtension(inputPath) + ".Designer.cs");
        if (File.Exists(resourceScriptPath))
        {
            var regexp = new Regex(@"^namespace ([^\s]+)", RegexOptions.Compiled | RegexOptions.Multiline);
            var match = regexp.Match(File.ReadAllText(resourceScriptPath));
            if (match.Success)
            {
                analyzerTitle = match.Groups[1].Value;
            }
        }


        // writing markdown file
        var sb = new StringBuilder();
        sb.AppendLine($"# {analyzerTitle}");
        sb.AppendLine($"Auto-generated by `{Assembly.GetExecutingAssembly().FullName}`  ");
        sb.AppendLine($"Resource file: `{inputPath}`  ");
        sb.AppendLine($"Resource suffix: `{SUFFIX_TITLE}` `{SUFFIX_DESCRIPTION}` `{SUFFIX_MD_TITLE}`  ");

        int maxTitleLength = analyzerInfo.Values.Max(static x => x.title.Length);

        int lastNumber = int.MinValue;
        foreach (var data in analyzerInfo.Values.OrderBy(static x => x.diagnosticId).ThenBy(static x => x.description.Length != 0))
        {
            var number = GetDiagnosticNumber(data.diagnosticId);

            //category!!
            if (data.description.Length == 0)
            {
                sb.AppendLine();
                sb.AppendLine($"## {data.title}");

                //sb.AppendLine();
                sb.AppendLine($"| ID      | {"Diagnostic".PadRight(maxTitleLength)} | Description");
                sb.AppendLine($"|---------|-{"-----".PadRight(maxTitleLength, '-')}-|-------------");

                number--;  // to avoid inserting separator
                goto NEXT;
            }
            else if (number != lastNumber + 1)  //separator
            {
                sb.AppendLine("| -");
            }

            sb.AppendLine($"| {data.diagnosticId} | {data.title.PadRight(maxTitleLength)} | {data.description}");

        NEXT:
            lastNumber = number;
        }

        var dirPath = Path.GetDirectoryName(outputPath);
        if (!string.IsNullOrWhiteSpace(dirPath) && !Directory.Exists(dirPath))
            Directory.CreateDirectory(dirPath);

        File.WriteAllText(outputPath, sb.ToString(), Encoding.UTF8);

        Console.WriteLine(sb.ToString());
        Console.WriteLine("DONE");
    }


    /*  helper  ================================================================ */

    static string GetDiagnosticId(string value)
    {
        var split = value.Split('_', StringSplitOptions.RemoveEmptyEntries);
        if (split.Length < 2)
            throw new ArgumentException("diagnostic id not found", nameof(value));

        return split[0];
    }

    static int GetDiagnosticNumber(string value)
    {
        int pos = 0;
        foreach (var c in value)
        {
            if (!char.IsNumber(c))
                pos++;
        }

        if (pos >= value.Length)
            return -1;

        return int.Parse(value.Substring(pos));
    }

}
